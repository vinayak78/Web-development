/* selector in css  */

/* element selector */
/* div {
    background-color: grey;
} */

/* class slector */
.div {
    background-color: grey;
}

/* id selector */
#div {
    background-color: red;
}

/* child selector */
div>p {
    background-color: red;
}

/* desecndant selector */
div p {
    background-color: yellow;
}

/* pseudo selector */
p:hover {
    background-color: violet;
}

/* Universal selector */
* {
    padding: 0;
    margin: 0;
}

/* border box */
/* height = content + top + low padding + top + low border + top + low margin
after applying border box total height = content + top + low padding + top + low border  */
/* margin colapse = happen when two box margin collapse each over in this case higest margin will set */
.font-div {
    box-sizing: border-box;
}

/* font */
/* we can import font online and we can use some font property to enhance our font */

.font-div {
    font-family: "Caveat", cursive;
    font-size: 35px;
    font-weight: 500;
    /* font-style: italic; */
    /* line height -  use for changing the gape height between lines */
    /* letter height - use for setting the gape between letter */
    text-transform: capitalize;
    text-decoration: underline;
    text-decoration-color: aqua;
    text-decoration-style: wavy;
    text-decoration-thickness: 2px;
    text-align: center;
    text-overflow: clip;
    overflow: hidden;
}

/* color */
.colordiv {
    /* we can set color in ways (mostly color name and hex color used in industry) */
    color: red;
    color: #ab4630;
    color: rgb(red, green, blue);
    color: rgba(red, green, blue, alpha);
    color: hsl(hue, saturation, lightness);
    color: hsla(hue, saturation, lightness, alpha);
}

/* CSS sepcificity */
/* 
1. postion and order apperenace - selector is same whoever comens in end will be slected
2. specifity - inline css > id > class or attribute or pseudo > element selector > universal selector (always try to use lower speifity selector first)
3. origin - user agent stylesheet (apply by the browser)
4. importance - use !impportant (!important > inline css) color : blue !important;
 */
/* 
 Specificity Calculation

To calculate specificity, assign a value to each part of the selector:

    Universal Selector: 0
    Element selectors and pseudo-elements: 1
    Class selectors, attribute selectors, and pseudo-classes: 10
    ID selectors: 100
    Inline styles: 1000

Then, add up the values of all the parts in the selector.
 */

/*
Size unit - px , vh , vw , em , rem
px - 12px , 45px.
vh - view port height.
vw - view poet width.
em - relativw to the parent element.
rem - relative to the root element.
% - relative to the parent 
min , max - height , width 
*/
/* CSS display property */
/* we have inline and block elemeent in html but we can change there property by inline and block property  */

/* the margin top and width property does not work on displey :inline in this case we use inline-block  */

.box1 {
    border: 2px solid red;
    /* display: inline; */
    display: inline-block;
}

.box2 {
    border: 2px solid blue;
    /* display: inline; */
    display: inline-block;
}

.box3 {
    border: 2px solid green;
    /* display: inline; */
    display: inline-block;
}

/* display - none and visiblity- hidden */
/* .box2 {
   /* display: none; space as well content will disapear*/
/* visibility: hidden; space will not disapear    
} */

/* shadows abnd text shadows */
/*
syntax box-shadow : h-offset v-offset blur spread color; 
h-offset = horizontal shadow
v-offset = vertical shadow
blur = blur radius
spread = size of the shadow
color = color of the shadow

syntax text-shadow : h-offset v-offset blur-radius color;
h-offset -	How far the shadow moves horizontally (→)
v-offset -	How far the shadow moves vertically (↓)
blur-radius	(Optional) - how blurry the shadow is
color	- Shadow color (name, rgb(), rgba(), etc.)
*/
.shadow-box {
    border: 2px solid red;
    height: 30vh;
    width: 30vh;
    margin: auto;
    text-align: center;
}

.shadow-box:hover {
    box-shadow: 4px 5px 7px 2px pink;
    text-shadow: 2px 2px 2px pink;
}

/* styling list */
/* list iteam is one of the imprtant list iteam to use i nav */
.styling-list {
    /* to remove the mark
    /* list-style: none; */
    display: inline;
    /* include the marker inside  */
    list-style-position: inside;

}

.styling-list:hover::before {
    content: "😁";
}

/* short hand for list style -> list-style: type position image; */


/* overflow */
/* we use over flow to reduce the risk of text overflow  */
.over-flow {
    height: 25vh;
    width: 25vw;
    border: 2px solid black;
    /* Mainly use this */
    overflow: auto;
    /* overflow: scroll; */
    /* overflow: hidden; */
    /* text-overflow: clip; */
}

/* position property */
/* 
there are four postion in css 
position - static; (by default)
position - realtive; (we can use top bottom left right and z-index)
position - absolute; (break the flow of web (relative to the root tag if the parent tag have postion set then relative to parent))
position - fixed (fixed position on web port)
position - sticjy (stick during scrolling)
*/
/* 
Exception : Transform , filter or perspective can also make an element appear as positioned
*/
.postion_parent {
    border: 2px solid purple;
    width: 80vw;
    height: 80vh;
    position: relative;
}

.postiondiv {
    border: 2px solid black;
    width: 50vw;
    height: 10vh;
    margin: 10px;
    padding: 20px;
}

.positondiv1 {
    background-color: red;
    /* position: relative; */

}

.positondiv2 {
    background-color: green;
    /* position: absolute; */
    /* top: 0px; */
}

.positondiv3 {
    background-color: blue;
    /* position: sticky; */
    /* bottom: 0px; */
}

.positondiv4 {
    background-color: yellow;
    /* position: fixed; */
    /* top: 0px; */
}


/* CSS variable */
/* variable can store values that can be use in property */
/* Global declaration */
:root {
    --color: blue;
    --seccolor: green;
    --opasity: 0.5;
    --zindex: 1;
    --dfheight: 350px;
    --dfwidth: 350px;
}

.variable_div {
    /* local declaration */
    /* --color: white; */
    color: var(--color, yellow);
    background-color: var(--seccolor, red);
    opacity: var(--opasity, 1);
    z-index: var(--zindex);
    height: var(--dfheight);
    width: var(--dfwidth);
}


/* Media query */
/*
synatx:-
@media not/only mediatype and (esxpress){
    CSS-code;
} 
*/
/* we use media queries for responsive background */
@media only screen and (max-width : 455px) {
    body {
        background-color: blue;
    }
}

@media screen and (orientation : landscape) {
    .variable_div {
        border: 2px solid red;
    }
}


/* CSS float and clear */
/* Float and clear not longer use in mordern wwebsite but we need to know them */
/* float -  object can float on right left 
clear - object dont allow any one to take place in his right left both */
.cards {
    border: 2px solid black;
    display: flow-root;
}

.card {
    border: 2px solid blue;
}

.cards :nth-child(1) {
    float: left;
    /* float: right; */
}

.cards :nth-child(2) {
    clear: right;
}

/* more CSS selector  */
.selectordiv {
    border: 2px solid black;
}

.selector-boxes:first-child {
    background-color: red;
}

.selectordiv * {
    border: 2px solid green;
}

[data-color="primary"] {
    margin-top: 45px;
}

.selector-boxes:nth-child(even) {
    background-color: yellow;
}

.selector-boxes:nth-last-child(1) {
    background-color: aqua;
}

/* pseudo element */
.selectordiv::before {
    content: "Hello ji";
}

.selectordiv::selection {
    color: red;
    background-color: white;
}

.selectordiv::first-line {
    color: yellow;
}

.selector-boxes::first-letter {
    color: peru;
}

.selectordiv>input::placeholder {
    color: green;
}

/*  Flex box */
/* Flex box use for centering the content or moving them as per dev requirment 
Justify content property - algn iteam center in main axes (flkex direction)
align -iteam -> algin iteam center cros axis
*/

.container {
    height: 20vh;
    background-color: lightblue;
    display: flex;
    justify-content: center;
    align-items: center;
    /* flex-direction: column;  change the by default left to right flex direction to dev requirment */

    /*Wrap use when content got out of container to wrap them all  */
    flex-wrap: wrap; 

    /* use when we have multiple lines (content)  */
    align-content: center;


    /*  <'flex-direction'> || <'flex-wrap'> */
    flex-flow: row wrap;

    gap : 5px;
    /* Sort hand for gap */
    gap : 5px 6px; 
}

.iteam {
    height: 35px;
    width: 35px;
    background-color: darkblue;
    border: 2px solid white;
    /* margin: 5px; */

    /* distribute equal width to content */
    flex-grow: 1;

    /* shrink if window get small */
    flex-shrink: 2;

}
.iteam1{
    flex-grow: 2;
    align-self: flex-start;
}

/* CSS grid */
